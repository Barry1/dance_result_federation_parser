[
    {
        "path": "dtvprocessing.py",
        "line": 143,
        "func_name": "get_dtv_df",
        "type_comments": [
            "(bool) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "presentationlayer.py",
        "line": 16,
        "func_name": "print_tsh_web",
        "type_comments": [
            "(str, List[str], List[pandas.core.frame.DataFrame], List[str], Dict[str, Union[List[str], bool]]) -> None"
        ],
        "samples": 1
    },
    {
        "path": "sqlitedatabase.py",
        "line": 97,
        "func_name": "insertcouplestodb",
        "type_comments": [
            "(pandas.core.frame.DataFrame, str) -> pyannotate_runtime.collect_types.UnknownType",
            "(pandas.core.frame.DataFrame, str) -> None"
        ],
        "samples": 5
    },
    {
        "path": "stringprocessing.py",
        "line": 30,
        "func_name": "cleanevfromentry",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 10
    },
    {
        "path": "stringprocessing.py",
        "line": 40,
        "func_name": "clean_number_from_couple",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 10
    },
    {
        "path": "stringprocessing.py",
        "line": 49,
        "func_name": "sr_human_comp_info",
        "type_comments": [
            "(str) -> str"
        ],
        "samples": 5
    },
    {
        "path": "topturnierprocessing.py",
        "line": 31,
        "func_name": "checkttontree",
        "type_comments": [
            "(lxml.etree._ElementTree) -> bool"
        ],
        "samples": 1
    },
    {
        "path": "topturnierprocessing.py",
        "line": 48,
        "func_name": "srparserurl",
        "type_comments": [
            "(str) -> Dict[str, str]"
        ],
        "samples": 1
    },
    {
        "path": "topturnierprocessing.py",
        "line": 79,
        "func_name": "tt_trndmntdatefrom",
        "type_comments": [
            "(requests.models.Response) -> Dict[str, str]"
        ],
        "samples": 5
    },
    {
        "path": "topturnierprocessing.py",
        "line": 165,
        "func_name": "tt_from_erg",
        "type_comments": [
            "(requests.models.Response) -> pyannotate_runtime.collect_types.UnknownType",
            "(requests.models.Response) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "topturnierprocessing.py",
        "line": 218,
        "func_name": "interpret_tt_result",
        "type_comments": [
            "(str) -> pyannotate_runtime.collect_types.UnknownType",
            "(str) -> pandas.core.frame.DataFrame"
        ],
        "samples": 5
    },
    {
        "path": "tpsprocessing.py",
        "line": 23,
        "func_name": "checktpsontree",
        "type_comments": [
            "(lxml.etree._ElementTree) -> bool"
        ],
        "samples": 1
    }
]